syntax="proto2";
package rong.Paxos;


enum OpCode {
    kPaxosLease             = 1;  // Lease选主使用
    kPaxosBasic             = 2;  // 普通用
};

message Entry {
    required bytes data     = 1;
    optional bytes context  = 2;
};


// PaxosLease

enum LeaseMessageType {

    kLPrepareRequest        = 1;
    kLPrepareRejected       = 2;
    kLPreparePreviouslyAccepted = 3;
    kLPrepareCurrentlyOpen  = 4;

    kLProposeRequest        = 5;
    kLProposeRejected       = 6;
    kLProposeAccepted       = 7;
    
    kLProposeLearnOpen      = 8;
};

message LeaseMessage {

    required LeaseMessageType   type        = 1;
    required uint64     node_id     = 2;
    required uint64     proposal_id = 3;
    required uint64     instance_id = 4;
    required uint64     log_last_index = 5;    // 本地最大的日志条目数目

    optional uint64     accepted_proposal_id = 6;
    optional uint64     lease_owner = 7;
    optional uint64     local_expire_time = 8;
};


// PaxosBasic
enum BasicMessageType {

    kBPrepareRequest        = 1;
    kBPrepareRejected       = 2;
    kBPreparePreviouslyAccepted = 3;
    kBPrepareCurrentlyOpen  = 4;    // 之前没有收到accpet，可以让Proposer指定

    kBProposeRequest        = 5;
    kBProposeRejected       = 6;
    kBProposeAccepted       = 7;

    kBProposeLearnValue     = 8;    // learner发送具体的value让Peer学习
    kBProposeLearnResponse  = 9;

    kBProposeChosenValue    = 10;   // 对于缺少的value，主动请求学习
    kBProposeChosenResponse = 11;   // 返回信息

    kBProposeStartCatchup   = 12;   // 快照

    // 任何情况下，当Proposer的Prepare、Propose带有的instance_id过旧
    // 就使用改消息返回chosen value
    kBMandatoryRejectChonsen = 20;  
};


message BasicMessage {

    required BasicMessageType   type = 1;
    required uint64     node_id     = 2;
    required uint64     proposal_id = 3;
    required uint64     instance_id = 4;        // 不同的消息类型有不同的含义
    required uint64     log_last_index = 5;    // 本地最大的日志条目数目
    
    optional uint64     accepted_proposal_id = 6;
    optional uint64     promised_proposal_id = 7;
    optional bytes      value       = 8;
};

